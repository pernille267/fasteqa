// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// BCa_bootstrap_ci
NumericVector BCa_bootstrap_ci(NumericVector bootstrapped_parameter_estimates, NumericVector jackknife_parameter_estimates, float original_parameter_estimate, float level, int silence);
RcppExport SEXP _fasteqa_BCa_bootstrap_ci(SEXP bootstrapped_parameter_estimatesSEXP, SEXP jackknife_parameter_estimatesSEXP, SEXP original_parameter_estimateSEXP, SEXP levelSEXP, SEXP silenceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type bootstrapped_parameter_estimates(bootstrapped_parameter_estimatesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type jackknife_parameter_estimates(jackknife_parameter_estimatesSEXP);
    Rcpp::traits::input_parameter< float >::type original_parameter_estimate(original_parameter_estimateSEXP);
    Rcpp::traits::input_parameter< float >::type level(levelSEXP);
    Rcpp::traits::input_parameter< int >::type silence(silenceSEXP);
    rcpp_result_gen = Rcpp::wrap(BCa_bootstrap_ci(bootstrapped_parameter_estimates, jackknife_parameter_estimates, original_parameter_estimate, level, silence));
    return rcpp_result_gen;
END_RCPP
}
// Estimatek
List Estimatek(List data, int silence);
RcppExport SEXP _fasteqa_Estimatek(SEXP dataSEXP, SEXP silenceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type silence(silenceSEXP);
    rcpp_result_gen = Rcpp::wrap(Estimatek(data, silence));
    return rcpp_result_gen;
END_RCPP
}
// PredictDeming
List PredictDeming(List data, NumericVector NewData, List Precision, int MaxR, float level, int type, int rounding, int CalculateLatent, int silence);
RcppExport SEXP _fasteqa_PredictDeming(SEXP dataSEXP, SEXP NewDataSEXP, SEXP PrecisionSEXP, SEXP MaxRSEXP, SEXP levelSEXP, SEXP typeSEXP, SEXP roundingSEXP, SEXP CalculateLatentSEXP, SEXP silenceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type NewData(NewDataSEXP);
    Rcpp::traits::input_parameter< List >::type Precision(PrecisionSEXP);
    Rcpp::traits::input_parameter< int >::type MaxR(MaxRSEXP);
    Rcpp::traits::input_parameter< float >::type level(levelSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< int >::type rounding(roundingSEXP);
    Rcpp::traits::input_parameter< int >::type CalculateLatent(CalculateLatentSEXP);
    Rcpp::traits::input_parameter< int >::type silence(silenceSEXP);
    rcpp_result_gen = Rcpp::wrap(PredictDeming(data, NewData, Precision, MaxR, level, type, rounding, CalculateLatent, silence));
    return rcpp_result_gen;
END_RCPP
}
// PredictOLS
List PredictOLS(List data, NumericVector NewData, List Precision, int MaxR, float level, int silence);
RcppExport SEXP _fasteqa_PredictOLS(SEXP dataSEXP, SEXP NewDataSEXP, SEXP PrecisionSEXP, SEXP MaxRSEXP, SEXP levelSEXP, SEXP silenceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type NewData(NewDataSEXP);
    Rcpp::traits::input_parameter< List >::type Precision(PrecisionSEXP);
    Rcpp::traits::input_parameter< int >::type MaxR(MaxRSEXP);
    Rcpp::traits::input_parameter< float >::type level(levelSEXP);
    Rcpp::traits::input_parameter< int >::type silence(silenceSEXP);
    rcpp_result_gen = Rcpp::wrap(PredictOLS(data, NewData, Precision, MaxR, level, silence));
    return rcpp_result_gen;
END_RCPP
}
// bootstrap_ci
NumericVector bootstrap_ci(NumericVector bootstrapped_parameter_estimates, float original_parameter_estimate, int type, float level, int silence);
RcppExport SEXP _fasteqa_bootstrap_ci(SEXP bootstrapped_parameter_estimatesSEXP, SEXP original_parameter_estimateSEXP, SEXP typeSEXP, SEXP levelSEXP, SEXP silenceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type bootstrapped_parameter_estimates(bootstrapped_parameter_estimatesSEXP);
    Rcpp::traits::input_parameter< float >::type original_parameter_estimate(original_parameter_estimateSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< float >::type level(levelSEXP);
    Rcpp::traits::input_parameter< int >::type silence(silenceSEXP);
    rcpp_result_gen = Rcpp::wrap(bootstrap_ci(bootstrapped_parameter_estimates, original_parameter_estimate, type, level, silence));
    return rcpp_result_gen;
END_RCPP
}
// fun_of_replicates
List fun_of_replicates(List data, String fun, int silence);
RcppExport SEXP _fasteqa_fun_of_replicates(SEXP dataSEXP, SEXP funSEXP, SEXP silenceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< String >::type fun(funSEXP);
    Rcpp::traits::input_parameter< int >::type silence(silenceSEXP);
    rcpp_result_gen = Rcpp::wrap(fun_of_replicates(data, fun, silence));
    return rcpp_result_gen;
END_RCPP
}
// global_precision_estimates
List global_precision_estimates(List data, int silence);
RcppExport SEXP _fasteqa_global_precision_estimates(SEXP dataSEXP, SEXP silenceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type silence(silenceSEXP);
    rcpp_result_gen = Rcpp::wrap(global_precision_estimates(data, silence));
    return rcpp_result_gen;
END_RCPP
}
// leave_one_out
List leave_one_out(List data, int loo_id);
RcppExport SEXP _fasteqa_leave_one_out(SEXP dataSEXP, SEXP loo_idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type loo_id(loo_idSEXP);
    rcpp_result_gen = Rcpp::wrap(leave_one_out(data, loo_id));
    return rcpp_result_gen;
END_RCPP
}
// predict_eqa
List predict_eqa(List data, List new_data, List imprecision_estimates, int R, String method, float level, int rounding);
RcppExport SEXP _fasteqa_predict_eqa(SEXP dataSEXP, SEXP new_dataSEXP, SEXP imprecision_estimatesSEXP, SEXP RSEXP, SEXP methodSEXP, SEXP levelSEXP, SEXP roundingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< List >::type new_data(new_dataSEXP);
    Rcpp::traits::input_parameter< List >::type imprecision_estimates(imprecision_estimatesSEXP);
    Rcpp::traits::input_parameter< int >::type R(RSEXP);
    Rcpp::traits::input_parameter< String >::type method(methodSEXP);
    Rcpp::traits::input_parameter< float >::type level(levelSEXP);
    Rcpp::traits::input_parameter< int >::type rounding(roundingSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_eqa(data, new_data, imprecision_estimates, R, method, level, rounding));
    return rcpp_result_gen;
END_RCPP
}
// resample_samples
List resample_samples(List data, int silence);
RcppExport SEXP _fasteqa_resample_samples(SEXP dataSEXP, SEXP silenceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type silence(silenceSEXP);
    rcpp_result_gen = Rcpp::wrap(resample_samples(data, silence));
    return rcpp_result_gen;
END_RCPP
}
// simulate_eqa_data
List simulate_eqa_data(List parameters, int silence);
RcppExport SEXP _fasteqa_simulate_eqa_data(SEXP parametersSEXP, SEXP silenceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< int >::type silence(silenceSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_eqa_data(parameters, silence));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_fasteqa_BCa_bootstrap_ci", (DL_FUNC) &_fasteqa_BCa_bootstrap_ci, 5},
    {"_fasteqa_Estimatek", (DL_FUNC) &_fasteqa_Estimatek, 2},
    {"_fasteqa_PredictDeming", (DL_FUNC) &_fasteqa_PredictDeming, 9},
    {"_fasteqa_PredictOLS", (DL_FUNC) &_fasteqa_PredictOLS, 6},
    {"_fasteqa_bootstrap_ci", (DL_FUNC) &_fasteqa_bootstrap_ci, 5},
    {"_fasteqa_fun_of_replicates", (DL_FUNC) &_fasteqa_fun_of_replicates, 3},
    {"_fasteqa_global_precision_estimates", (DL_FUNC) &_fasteqa_global_precision_estimates, 2},
    {"_fasteqa_leave_one_out", (DL_FUNC) &_fasteqa_leave_one_out, 2},
    {"_fasteqa_predict_eqa", (DL_FUNC) &_fasteqa_predict_eqa, 7},
    {"_fasteqa_resample_samples", (DL_FUNC) &_fasteqa_resample_samples, 2},
    {"_fasteqa_simulate_eqa_data", (DL_FUNC) &_fasteqa_simulate_eqa_data, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_fasteqa(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
