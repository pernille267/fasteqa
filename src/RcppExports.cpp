// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// CharacterEstimatePrecision
List CharacterEstimatePrecision(List data, int silence);
RcppExport SEXP _fasteqa_CharacterEstimatePrecision(SEXP dataSEXP, SEXP silenceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type silence(silenceSEXP);
    rcpp_result_gen = Rcpp::wrap(CharacterEstimatePrecision(data, silence));
    return rcpp_result_gen;
END_RCPP
}
// Estimatek
List Estimatek(List data, int silence);
RcppExport SEXP _fasteqa_Estimatek(SEXP dataSEXP, SEXP silenceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type silence(silenceSEXP);
    rcpp_result_gen = Rcpp::wrap(Estimatek(data, silence));
    return rcpp_result_gen;
END_RCPP
}
// MeanOfReplicates
List MeanOfReplicates(List data, int silence);
RcppExport SEXP _fasteqa_MeanOfReplicates(SEXP dataSEXP, SEXP silenceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type silence(silenceSEXP);
    rcpp_result_gen = Rcpp::wrap(MeanOfReplicates(data, silence));
    return rcpp_result_gen;
END_RCPP
}
// PredictDeming
List PredictDeming(List data, NumericVector NewData, List Precision, int MaxR, float level, int type, int rounding, int CalculateLatent, int silence);
RcppExport SEXP _fasteqa_PredictDeming(SEXP dataSEXP, SEXP NewDataSEXP, SEXP PrecisionSEXP, SEXP MaxRSEXP, SEXP levelSEXP, SEXP typeSEXP, SEXP roundingSEXP, SEXP CalculateLatentSEXP, SEXP silenceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type NewData(NewDataSEXP);
    Rcpp::traits::input_parameter< List >::type Precision(PrecisionSEXP);
    Rcpp::traits::input_parameter< int >::type MaxR(MaxRSEXP);
    Rcpp::traits::input_parameter< float >::type level(levelSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< int >::type rounding(roundingSEXP);
    Rcpp::traits::input_parameter< int >::type CalculateLatent(CalculateLatentSEXP);
    Rcpp::traits::input_parameter< int >::type silence(silenceSEXP);
    rcpp_result_gen = Rcpp::wrap(PredictDeming(data, NewData, Precision, MaxR, level, type, rounding, CalculateLatent, silence));
    return rcpp_result_gen;
END_RCPP
}
// PredictOLS
List PredictOLS(List data, NumericVector NewData, List Precision, int MaxR, float level, int silence);
RcppExport SEXP _fasteqa_PredictOLS(SEXP dataSEXP, SEXP NewDataSEXP, SEXP PrecisionSEXP, SEXP MaxRSEXP, SEXP levelSEXP, SEXP silenceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type NewData(NewDataSEXP);
    Rcpp::traits::input_parameter< List >::type Precision(PrecisionSEXP);
    Rcpp::traits::input_parameter< int >::type MaxR(MaxRSEXP);
    Rcpp::traits::input_parameter< float >::type level(levelSEXP);
    Rcpp::traits::input_parameter< int >::type silence(silenceSEXP);
    rcpp_result_gen = Rcpp::wrap(PredictOLS(data, NewData, Precision, MaxR, level, silence));
    return rcpp_result_gen;
END_RCPP
}
// SimulateEqaData
List SimulateEqaData(int n, int R, int silence);
RcppExport SEXP _fasteqa_SimulateEqaData(SEXP nSEXP, SEXP RSEXP, SEXP silenceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type R(RSEXP);
    Rcpp::traits::input_parameter< int >::type silence(silenceSEXP);
    rcpp_result_gen = Rcpp::wrap(SimulateEqaData(n, R, silence));
    return rcpp_result_gen;
END_RCPP
}
// resample_samples
List resample_samples(List data, int silence);
RcppExport SEXP _fasteqa_resample_samples(SEXP dataSEXP, SEXP silenceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type silence(silenceSEXP);
    rcpp_result_gen = Rcpp::wrap(resample_samples(data, silence));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_fasteqa_CharacterEstimatePrecision", (DL_FUNC) &_fasteqa_CharacterEstimatePrecision, 2},
    {"_fasteqa_Estimatek", (DL_FUNC) &_fasteqa_Estimatek, 2},
    {"_fasteqa_MeanOfReplicates", (DL_FUNC) &_fasteqa_MeanOfReplicates, 2},
    {"_fasteqa_PredictDeming", (DL_FUNC) &_fasteqa_PredictDeming, 9},
    {"_fasteqa_PredictOLS", (DL_FUNC) &_fasteqa_PredictOLS, 6},
    {"_fasteqa_SimulateEqaData", (DL_FUNC) &_fasteqa_SimulateEqaData, 3},
    {"_fasteqa_resample_samples", (DL_FUNC) &_fasteqa_resample_samples, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_fasteqa(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
